name: createTag
on:
  workflow_dispatch:
    inputs:
      ref_name: 
      head_ref: 
#   pull_request:
#     branches:
#       - master
#       - engineering
#     types: 
#       - closed

env:
  branch_merge: ${{ inputs.ref_name }}
  branch_source: ${{ inputs.head_ref }}
  
jobs:
  define-variables:
#     if: github.event.pull_request.merged == true  
    runs-on: ubuntu-latest
    steps:
      - id: get-buildVersion
        run: |
          echo "buildVersion=$( echo ${{ env.branch_source}} | cut -d- -f3)" >> $GITHUB_ENV
      - name: log-failure1
        if: failure()
        run: echo "source branch name-''${{env.branch_source}}'' is not in the correct format, please check merge branch format is xxx-build-###"
      - id: check-buildVersion
        if: env.buildVersion >0
        run: |
          id=$( echo 'passed')
          echo "buildVersionTrack=$id" >> $GITHUB_OUTPUT
      - name: if-failure
        if: steps.check-buildVersion.outputs.buildVersionTrack != 'passed'
        run: echo "build version from source branch name-''${{env.buildVersion}}'' is not a number, please check merge branch format is xxx-build-###"
      - name: set-engineering-build
        if: env.branch_merge  == 'engineering' && steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        run: |
          echo "matlabTag=EngBuild${{env.buildVersion}}" >> $GITHUB_ENV
      - name: set-engineering-release
        if: env.branch_merge  == 'engineering' && steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        run: |
          echo "releaseType=Engineering" >> $GITHUB_ENV
      - name: set-main-build
        if: steps.check-buildVersion.outputs.buildVersionTrack == 'passed' && env.branch_merge  == 'main'
        run: |
          echo "matlabTag=Build${{env.buildVersion}}" >> $GITHUB_ENV        
      - name: set-main-release
        if: env.branch_merge  == 'main' && steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        run: |
          echo "releaseType=Commercial" >> $GITHUB_ENV
      - name: run-env
        if: steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        run: env
      - name: Run flopatch-matlab repo workflows
        if: steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        run: |
          echo "Run workflow"
          sleep 10s
      - name: Trigger workflow
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        if: steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        with:
          owner: lhofer12
          repo: test_docs_target
          ref: EngApp
          github_token: ${{ secrets.G_ACCESS_TOKEN }}
          workflow_file_name: PullRequest.yml        
          client_payload: '{"matlabtag":"${{env.matlabTag}}","releaseType":"${{env.releaseType}}", "buildVersion": "${{env.buildVersion}}"}'
      - name: Create tag
        if: steps.check-buildVersion.outputs.buildVersionTrack == 'passed'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{env.matlabTag}}',
              sha: context.sha
              })
      - name: tag-failure
        if: failure()
        run: echo "Tag not created"
#       - name: complete
       # TODO logging
